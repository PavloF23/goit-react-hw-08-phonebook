{"version":3,"file":"static/js/244.4d82ede9.chunk.js","mappings":"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","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","utils/getRandomHexColor.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/EditForm/EditForm.styled.jsx","components/EditForm/EditForm.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Contain = styled.div`\n  margin-top: 70px;\n  max-width: 500px;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 20px 40px;\n  background-color: #fff5ee;\n  box-shadow: 1px 4px 6px rgba(0,0,0,0.16),0px 4px 4px rgba(0,0,0,0.06),0px 1px 1px rgba(0,0,0,0.12);\n`;","import PropTypes from 'prop-types';\nimport { Contain } from './Container.styled';\n\nexport function Container({ children }) {\n  return <Contain>{children}</Contain>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\nimport InputMask from 'react-input-mask';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 24px;\n  width: 500px;\n  padding: 20px 40px;\n  position: fixed;\n  z-index: 1;\n  top: 80px;\n  background-color: #fff5ee; \n  margin-left: -40px;\n`;\n\nexport const ContactBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: block;\n  width: 300px;\n  height: 10px;\n  margin-bottom: 35px;\n  color: #000;\n  font-size: 18px;\n\n  & input:focus ~ span,\n  & input:not(:placeholder-shown) ~ span{\n    transform: translateX(-10px) translateY(-25px);\n    font-size: 10px;\n  }\n`;\n\nexport const Input = styled(Field)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const InputNumber = styled(InputMask)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const Span = styled.span`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  transition: 0.6s;\n  color: #5793aad2;\n`;\n\nexport const Button = styled.button`\n  width: 200px;\n  height: 50px;\n  border-radius: 10px;\n  border: none;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  cursor: pointer;\n  transition: 0.2s;\n  background-color: #daddc0;\n  border: 2px solid rgba(33, 33, 33, 0.2);\n  margin-bottom: 20px;\n\n  :hover,\n  :focus {\n    background-color: rgb(207, 207, 207);\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -35px;\n  left: 45px;\n  font-size: 12px;\n  color: #ff4500;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FormContact, ContactBox, Label, Span, Input, InputNumber, Button, Error } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operation';\nimport toast from 'react-hot-toast';\nimport { getContacts } from \"redux/contacts/selectors\";\n\n\nexport function ContactForm() {\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      ...values,\n    };\n    if (\n      contacts.find(\n        ({ name }) =>\n          name.toLowerCase() === newContact.name.trim().toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in your contacts.`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  const notify = () => toast.error('Name may contain only letters, apostrophe, dash and spaces.');\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        // 'only letters.'\n        notify\n      )\n      .required('Write name, please'),\n    number: Yup.string()\n      .matches(\n        /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n        'Phone number must be digits'\n      )\n      .required('This field is required'),\n  });  \n\n    return (\n      <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <ContactBox>\n        <Label>          \n          <Input\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\" \"\n          />\n          <Span>Name</Span>\n          <Error component=\"div\" name=\"name\" />\n        </Label>        \n        <Label>           \n          <Input  name=\"number\">\n          {({ field }) => (  \n            <InputNumber \n           {...field}     \n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\" \"\n            mask=\"+99 999 999 9999\"\n          />\n          )}\n          </Input>\n          <Span>Number</Span>\n          <Error component=\"div\" name=\"number\" />\n        </Label>\n        </ContactBox>\n        <Button type=\"submit\">Add contact</Button>\n      </FormContact>\n      </Formik>\n    );\n  }","import styled from 'styled-components';\n\nexport const List = styled.ul` \n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 130px;  \n  color: #000;  \n  font-weight: 500;  \n  font-size: 20px;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n \n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-end;\n  margin-left: 20px;\n`;\n\nexport const Img = styled.img`\n  border-radius: 50%;\n`;\n\nexport const Contact = styled.div`\n  font-size: 15px;\n  display: flax;\n`;\n\nexport const Button = styled.button`\n  width: 85px;\n  height: auto;\n  cursor: pointer;\n  display: inline-block;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const EditBtn = styled.button`\n  width: 85px;\n  height: auto;\n  border: none;\n  display: inline-block;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;","export function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }","import styled from 'styled-components';\n\nexport const Overlay  = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.8);\n    z-index: 1200;\n  `;\n  \nexport const ModalWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Overlay, ModalWrap } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = evt => { \n    if (evt.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdrop = evt => {\n    if (evt.currentTarget === evt.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdrop}>\n      <ModalWrap>{children}</ModalWrap>\n    </Overlay>,\n    modalRoot\n  );\n}","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport InputMask from 'react-input-mask';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 24px;\n  width: 500px;\n  padding: 20px 40px;\n  // position: fixed;\n  z-index: 1;\n  top: 50%;\n  background-color: #fff5ee; \n  // margin-left: -40px;\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const InputName = styled(Field)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-end;\n  margin-left: 20px;\n`;\n\nexport const InputNumber = styled(InputMask)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const FormBtn = styled.button`\n  cursor: pointer;\n  padding: 4px 8px;\n  font-size: 30px;\n  // height: 35px;\n  border-radius: 4px;\n  border: none;\n  background-color: #fff5ee;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #808080;\n  }\n`;\n\n// export const EditBtn = styled.button`\n//   width: 85px;\n//   height: auto;\n//   border: none;\n//   display: inline-block;\n//   background-repeat: no-repeat;\n//   background-size: contain;\n//   background-color: transparent;\n//   cursor: pointer;\n\n//   &:hover {\n//     transform: scale(1.1);\n//   }\n// `;\n\nexport const ErrorStyled = styled(ErrorMessage)`\n  position: absolute;\n  bottom: 0;\n  transform: translatey(100%);\n  font-size: 10px;\n  background-color: white;\n  color: #212121;\n`;","import { MdSave } from 'react-icons/md';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyled, Box, FormField, InputName, InputNumber, FormBtn, ErrorStyled,} from './EditForm.styled';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nexport function EditForm({ onFormSubmit, nameToUpdate, numberToUpdate }) {\n  const updateContact = (values) => {\n    onFormSubmit(values);\n  };\n\n  return (\n    <Formik\n      onSubmit={updateContact}\n      initialValues={{\n        name: nameToUpdate,\n        number: numberToUpdate,\n      }}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <BsPersonCircle size=\"64\" color={getRandomHexColor()} />\n\n        <div\n          // display=\"flex\"\n          // alignItems=\"center\"\n          // justifyContent=\"space-between\"\n          // mt={4}\n        >\n          <Box>\n            <FormField>\n              <InputName type=\"text\" name=\"name\" placeholder=\"Name\" />\n              <ErrorStyled component=\"div\" name=\"name\" />\n            </FormField>\n\n            <FormField>\n              <Field name=\"number\">\n                {({ field }) => (\n                  <InputNumber\n                    {...field}\n                    type=\"tel\"\n                    mask=\"+99 999 999 9999\"\n                    placeholder=\"number\"\n                  />\n                )}\n              </Field>\n              <ErrorStyled component=\"div\" name=\"number\" />\n            </FormField>\n          </Box>\n\n          <FormBtn type=\"submit\" aria-label=\"Formtact\">\n            <MdSave size=\"40\" />\n          </FormBtn>\n        </div>\n      </FormStyled>\n    </Formik>\n  );\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { List, Item, Contact, Button, Box, EditBtn } from './ContactList.styled';\nimport { AiFillPhone, AiTwotoneDelete } from \"react-icons/ai\";\nimport { deleteContact, fetchContacts } from 'redux/contacts/operation';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useEffect, useState } from \"react\";\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\nimport { MdEdit } from 'react-icons/md';\nimport Modal from 'components/Modal/Modal';\nimport { EditForm } from 'components/EditForm/EditForm';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  // const [showEditForm, setShowEditForm] = useState(false); \n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  // const toggleEditForm = () => {\n  //   setShowEditForm(!showEditForm);\n  // };\n\n  const openModal = () => {\n    setShowModal(!showModal);   \n  };\n\n  // const handleUpdate = updatedContact => {\n  //   dispatch(updateContact({ id, ...updatedContact }));\n  //   toggleEditForm();\n  // };\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.trim().toLowerCase()))\n}\n\n  return (\n    <List>\n        {contacts.length ? (\n         getVisibleContacts().map(({ id, name, number }) => (\n          <Item key={id} >\n            <Contact>\n              <BsPersonCircle size=\"40\" color={getRandomHexColor()} />\n              <Box>\n                  <span><AiFillPhone/> {name}:</span>\n                  <span>{number}</span>\n              </Box>\n            </Contact>  \n            <div>\n              <EditBtn type=\"button\" onClick={openModal} aria-label=\"Edit contact\">\n                <MdEdit size=\"18\" /> Edit\n              </EditBtn>  \n              <Button type='button' onClick={() => dispatch(deleteContact(id))}><AiTwotoneDelete/> Del</Button>\n            </div>\n          </Item>\n          )) ) : (\n            <p>Your phonebook is empty. Please add contact.</p>\n          )}\n             {showModal && (\n        <Modal onClose={openModal}>\n          <EditForm\n            // onFormSubmit={handleUpdate}\n            // nameToUpdate={name}\n            // numberToUpdate={number}\n          />\n        </Modal>\n      )}          \n    </List>        \n  );\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container }  from '../components/Container/Container';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Toaster } from 'react-hot-toast';\nimport { getIsLoading, getError } from \"redux/contacts/selectors\";\nimport  Loader  from  '../components/Loader/Loader'\nimport { fetchContacts } from 'redux/contacts/operation';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container>\n        <ContactForm/>   \n        <Toaster position=\"top-center\" reverseOrder={false}/>  \n        {isLoading && !error && <Loader/>}\n        <ContactList/>      \n      </Container>\n    </>\n  );\n}"],"names":["Contain","styled","Container","children","FormContact","Form","ContactBox","Label","Input","Field","InputNumber","InputMask","Span","Button","Error","ErrorMessage","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","validationSchema","Yup","name","matches","toast","required","number","initialValues","onSubmit","values","resetForm","newContact","find","toLowerCase","trim","alert","addContact","autoComplete","type","title","placeholder","component","field","mask","List","Item","Box","Contact","EditBtn","getRandomHexColor","Math","floor","random","toString","Overlay","ModalWrap","modalRoot","document","querySelector","Modal","onClose","useEffect","window","addEventListener","handleEscape","removeEventListener","evt","code","createPortal","onClick","currentTarget","target","FormStyled","FormField","InputName","FormBtn","ErrorStyled","schema","yup","shape","EditForm","onFormSubmit","nameToUpdate","numberToUpdate","size","color","ContactList","filter","getFilter","useState","showModal","setShowModal","fetchContacts","openModal","length","contact","includes","map","id","deleteContact","Contacts","isLoading","getIsLoading","error","getError","position","reverseOrder","Loader"],"sourceRoot":""}
{"version":3,"file":"static/js/264.ebc2a7fe.chunk.js","mappings":"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","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","utils/getRandomHexColor.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Contain = styled.div`\nmargin-top: 70px;\n    max-width: 500px;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: center;\n    padding: 20px 40px;\n    background-color: #fff5ee;\n    box-shadow: 1px 4px 6px rgba(0,0,0,0.16),0px 4px 4px rgba(0,0,0,0.06),0px 1px 1px rgba(0,0,0,0.12);\n  `;","import PropTypes from 'prop-types';\nimport { Contain } from './Container.styled';\n\nexport function Container({ children }) {\n  return <Contain>{children}</Contain>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\nimport InputMask from 'react-input-mask';\n\nexport const FormContact = styled(Form)`\n// margin-top: 20px;\ndisplay: flex;\nflex-direction: row;\ngap: 24px;\nalign-items: center;\nposition: fixed;\nwidth: 500px;\nz-index: 1;\nbackground-color: #fff5ee;\npadding: 20px 40px;\ntop: 80px;\n/* left: 50%; */\nmargin-left: -40px;\n`;\n\nexport const ContactBox = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 5px;\n// align-items: center;\n`;\n\nexport const Label = styled.label`\nposition: relative;\ndisplay: block;\nwidth: 300px;\nheight: 10px;\nmargin-bottom: 35px;\ncolor: #000;\nfont-size: 18px;\n\n// &focus::placeholder {\n//   color: #010101;\n// }\n\n& input:focus ~ span,\n& input:not(:placeholder-shown) ~ span{\n    transform: translateX(-10px) translateY(-25px);\n    font-size: 10px;\n}\n`;\n\nexport const Input = styled(Field)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const InputNumber = styled(InputMask)`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nborder: 2px solid rgba(33, 33, 33, 0.2);\ncolor: #000;\noutline: none;\nbackground: #fff;\npadding: 6px;\nborder-radius: 10px;\nfont-size: 14px;\n\n&:focus,\n&:not(:placeholder-shown) {\n    border-color: #010101;\n    outline-color: rgba(33, 33, 33, 0.5);\n  }\n`;\n\nexport const Span = styled.span`\nposition: absolute;\ntop: 10px;\nleft: 10px;\nfont-size: 14px;\ntransition: 0.6s;\ncolor: #5793aad2;\n`;\n\nexport const Button = styled.button`\nwidth: 200px;\n  height: 50px;\n  border-radius: 10px;\n  border: none;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  cursor: pointer;\n  transition: 0.2s;\n  background-color: #daddc0;\n  border: 2px solid rgba(33, 33, 33, 0.2);\n  margin-bottom: 20px;\n\n  :hover,\n  :focus {\n    background-color: rgb(207, 207, 207);\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -35px;\n  left: 45px;\n  font-size: 12px;\n  color: #ff4500;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FormContact, ContactBox, Label, Span, Input, InputNumber, Button, Error } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operation';\nimport toast from 'react-hot-toast';\nimport { getContacts } from \"redux/contacts/selectors\";\n\n\nexport function ContactForm() {\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      ...values,\n    };\n    if (\n      contacts.find(\n        ({ name }) =>\n          name.toLowerCase() === newContact.name.trim().toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in your contacts.`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  const notify = () => toast.error('Name may contain only letters, apostrophe, dash and spaces.');\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        // 'only letters.'\n        notify\n      )\n      .required('Write name, please'),\n    number: Yup.string()\n      .matches(\n        /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n        'Phone number must be digits'\n      )\n      .required('This field is required'),\n  });  \n\n    return (\n      <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <ContactBox>\n        <Label>          \n          <Input\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\" \"\n          />\n          <Span>Name</Span>\n          <Error component=\"div\" name=\"name\" />\n        </Label>        \n        <Label>           \n          <Input  name=\"number\">\n          {({ field }) => (  \n            <InputNumber \n           {...field}     \n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\" \"\n            mask=\"+99 999 999 9999\"\n          />\n          )}\n          </Input>\n          <Span>Number</Span>\n          <Error component=\"div\" name=\"number\" />\n        </Label>\n        </ContactBox>\n        <Button type=\"submit\">Add contact</Button>\n      </FormContact>\n      </Formik>\n    );\n  }","import styled from 'styled-components';\n\nexport const List = styled.ul` \nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nmargin-top: 130px;  \ncolor: #000;  \nfont-weight: 500;  \nfont-size: 20px;\n`;\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\n\n&:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Box = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: flex-start;\njustify-content: flex-end;\nmargin-left: 20px;\n`;\n\nexport const Img = styled.img`\nborder-radius: 50%;\n`;\n\nexport const Contact = styled.div`\nfont-size: 15px;\ndisplay: flax;\n`;\n\nexport const Button = styled.button`\nwidth: 85px;\nheight: auto;\ncursor: pointer;\ndisplay: inline-block;\n\nbackground-repeat: no-repeat;\nbackground-size: contain;\nbackground-color: transparent;\nborder: none;\noutline: none;\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\ntransform: scale(1.1);\n}\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { List, Item, Contact, Button, Box } from './ContactList.styled';\nimport { AiFillPhone, AiTwotoneDelete } from \"react-icons/ai\";\nimport { deleteContact, fetchContacts } from 'redux/contacts/operation';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useEffect } from \"react\";\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.trim().toLowerCase()))\n}\n\n  return (\n    <List>\n        {contacts.length ? (\n         getVisibleContacts().map(({ id, name, number, foto }) => (\n          <Item key={id} >\n            <Contact>\n              {/* <Img width={60} src={foto} alt=\"avatar\"/> */}\n              <BsPersonCircle size=\"40\" color={getRandomHexColor()} />\n              <Box>\n                  <span><AiFillPhone/> {name}:</span>\n                  <span>{number}</span>\n              </Box>\n            </Contact>    \n            <Button type='button' onClick={() => dispatch(deleteContact(id))}><AiTwotoneDelete/> Delete</Button>\n          </Item>\n          )) ) : (\n            <p>Your phonebook is empty. Please add contact.</p>\n          )}\n          \n    </List>        \n  );\n}","export function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container }  from '../components/Container/Container';\n// import { AppStyle } from './App.styled';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\n// import { Filter } from '../components/Filter/Filter';\nimport { Toaster } from 'react-hot-toast';\nimport { getIsLoading, getError } from \"redux/contacts/selectors\";\n// import { useSelector } from 'react-redux';\nimport  Loader  from  '../components/Loader/Loader'\nimport { fetchContacts } from 'redux/contacts/operation';\n// import { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container>\n        {/* <h1>Phonebook</h1> */}\n        <ContactForm/>   \n        <Toaster position=\"top-center\" reverseOrder={false}/>  \n        {/* <h2>Contacts</h2> */}\n        {isLoading && !error && <Loader/>}\n        <ContactList/>      \n      </Container>\n    </>\n  );\n}"],"names":["Contain","styled","Container","children","FormContact","Form","ContactBox","Label","Input","Field","InputNumber","InputMask","Span","Button","Error","ErrorMessage","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","validationSchema","Yup","name","matches","toast","required","number","initialValues","onSubmit","values","resetForm","newContact","find","toLowerCase","trim","alert","addContact","autoComplete","type","title","placeholder","component","field","mask","List","Item","Box","Contact","ContactList","filter","getFilter","useEffect","fetchContacts","length","contact","includes","map","id","foto","size","color","Math","floor","random","toString","onClick","deleteContact","Contacts","isLoading","getIsLoading","error","getError","position","reverseOrder","Loader"],"sourceRoot":""}